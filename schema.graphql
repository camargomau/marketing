type Query {
	readTier: [Tier]
}

type Mutation {
	createTier(input: TierInput!): Tier!
	deleteTier(id: Int!): Tier!
	updateTier(id: Int!, input: TierInput!): Tier!
}

type Tier {
	id: ID
	"""
	The tier's name
	@example "Basic"
	"""
	name: String
	"""
	The tier's price per month, in cents
	@example "100"
	"""
	price: Int
}

input TierInput {
	name: String
	price: Int
}

type Brand {
	id: ID
	"""
	The brand's name
	@example "Microsoft"
	"""
	name: String
	"""
	The brand's login email
	@example "microsoft@outlook.com"
	"""
	email: String
	"""
	The password's hash
	@example "5e884898da2804"
	"""
	passwordHash: String
	"""
	The brand's phone number
	@example "555896448"
	"""
	phone: String
	"""
	The brand's payment tier (fk)
	"""
	tierId: Int
	"""
	The brand's payment tier (actual)
	"""
	tier: Tier
	"""
	Whether the brand has a due payment or not
	@example false
	"""
	paymentDue: Boolean
}
